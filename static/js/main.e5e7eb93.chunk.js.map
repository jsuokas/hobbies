{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["consumablesWeight","typeToDescription","rucksack","rain","overnight","overnight_cold_weather","swim","cooking","hydration","dark","comfort","safety","devices","necessities","toilet","App","useState","gear","map","it","type","gearTypeFilters","setGearTypeFilters","gearItemFilters","setGearItemFilters","consumablesWater","setConsumablesWater","consumablesGasSmall","setConsumablesGasSmall","consumablesGasMedium","setConsumablesGasMedium","gearItems","filter","includes","totalWeight","item","name","length","reduce","previous","current","weight","className","gearType","isSelected","id","value","checked","onChange","htmlFor","onClick","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5e7eb93.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport gear from './gear.json'\nimport './App.css';\n\nconst consumablesWeight = {\n  gasBottleSmall: 0.1,\n  gasBottleMedium: 0.230\n}\n\nconst typeToDescription = {\n  rucksack: 'I need to carry my stuff',\n  rain: 'It is going to rain',\n  overnight: 'Overnighter',\n  overnight_cold_weather: 'Overnighter in cold weather',\n  swim: 'Swimming!',\n  cooking: 'I am preparing meals',\n  hydration: 'I need to bring/carry water',\n  dark: 'I need a light in the darkness',\n  comfort: 'I want some comfort in my camp',\n  safety: 'The destination is not familiar to me',\n  devices: 'I need power to my devices',\n  necessities: 'Phone, keys and other necessities',\n  toilet: 'There is change of bathroom break'\n}\n\nfunction App() {\n  const [gearTypeFilters, setGearTypeFilters] = useState(gear.map(it => it.type))\n  const [gearItemFilters, setGearItemFilters] = useState([])\n  const [consumablesWater, setConsumablesWater] = useState(0)\n  const [consumablesGasSmall, setConsumablesGasSmall] = useState(0)\n  const [consumablesGasMedium, setConsumablesGasMedium] = useState(0)\n  const gearItems = gear.filter(it => gearTypeFilters.includes(it.type))\n  const totalWeight = gearItems\n    .filter(it => gearTypeFilters.includes(it.type))\n    .filter(it => gearItemFilters.filter(item => item.name === it.name).length !== 0)\n    .reduce((previous, current) => previous + current.weight, 0 + consumablesWater + (consumablesGasSmall * consumablesWeight.gasBottleSmall) + (consumablesGasMedium * consumablesWeight.gasBottleMedium))\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\"><h4>What type of gear you are taking?</h4></div>\n      <div className=\"content\">\n      {gear\n        .map(it => it.type)\n        .reduce((previous, current) => previous.includes(current) ? previous : [...previous, current], [])\n        .map(gearType => {\n          const isSelected = gearTypeFilters.includes(gearType)\n          const id = `gear-filter-stage-1-${gearType}`\n          const onChange = () => isSelected ? setGearTypeFilters(gearTypeFilters.filter(it => it !== gearType)) : setGearTypeFilters([...gearTypeFilters, gearType])\n\n          return (\n            <div key={`key-${id}`} className=\"gear-item\">\n              <input\n              id={id}\n              type=\"checkbox\"\n              value={gearType}\n              name={gearType}\n              checked={isSelected}\n              onChange={onChange} />\n              <label htmlFor={id}>{typeToDescription[gearType] ? typeToDescription[gearType] : gearType}</label>\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"title\"><h4>Base weight</h4><input className=\"select-all-button\" type=\"button\" value=\"Select all\" onClick={() => setGearItemFilters(gearItems)} /></div>\n      <div className=\"content\">\n      \n      {gearItems.map(item => {\n        const id = `gear-filter-stage-2-${item.name}`\n        const isSelected = gearItemFilters.filter(it => it.name === item.name).length !== 0 ? true : false \n        const onChange = () => isSelected ? setGearItemFilters(gearItemFilters.filter(it => it.name !== item.name)) : setGearItemFilters([...gearItemFilters, item])\n\n        return (\n          <div key={`key-${id}`} className=\"gear-item\">\n            <input\n                id={id}\n                type=\"checkbox\"\n                value={item.name}\n                name={item.name}\n                checked={isSelected}\n                onChange={onChange} />\n                <label htmlFor={id}>{item.name} ({item.weight})</label>\n          </div>\n        )\n      })}\n      </div>\n\n      <div className=\"title\"><h4>Consumables</h4></div>\n      <div className=\"content\">\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesWater(consumablesWater + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesWater(consumablesWater > 0 ? consumablesWater - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesWater} liters of water</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesGasSmall(consumablesGasSmall + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesGasSmall(consumablesGasSmall > 0 ? consumablesGasSmall - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesGasSmall} small gas bottles (100g)</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesGasMedium(consumablesGasMedium + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesGasMedium(consumablesGasMedium > 0 ? consumablesGasMedium - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesGasMedium} medium gas bottles (256g)</span>\n        </div>\n      </div>\n\n      <div className=\"title\"><strong>Total</strong> {totalWeight.toFixed(2)}kg</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}