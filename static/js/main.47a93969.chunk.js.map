{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","gear","map","it","type","gearTypeFilters","setGearTypeFilters","gearItemFilters","setGearItemFilters","gearItems","filter","includes","totalWeight","item","name","length","reduce","previous","current","weight","className","gearType","isSelected","id","value","checked","onChange","htmlFor","onClick","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAmEeA,MA/Df,WAAgB,IAAD,EACiCC,mBAASC,EAAKC,KAAI,SAAAC,GAAE,OAAIA,EAAGC,SAD5D,mBACNC,EADM,KACWC,EADX,OAEiCN,mBAAS,IAF1C,mBAENO,EAFM,KAEWC,EAFX,KAGPC,EAAYR,EAAKS,QAAO,SAAAP,GAAE,OAAIE,EAAgBM,SAASR,EAAGC,SAC1DQ,EAAcH,EACjBC,QAAO,SAAAP,GAAE,OAAIE,EAAgBM,SAASR,EAAGC,SACzCM,QAAO,SAAAP,GAAE,OAAqE,IAAjEI,EAAgBG,QAAO,SAAAG,GAAI,OAAIA,EAAKC,OAASX,EAAGW,QAAMC,UACnEC,QAAO,SAACC,EAAUC,GAAX,OAAuBD,EAAWC,EAAQC,SAAQ,GAE5D,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SAAuB,qEACvB,qBAAKA,UAAU,UAAf,SACCnB,EACEC,KAAI,SAAAC,GAAE,OAAIA,EAAGC,QACbY,QAAO,SAACC,EAAUC,GAAX,OAAuBD,EAASN,SAASO,GAAWD,EAA7B,sBAA4CA,GAA5C,CAAsDC,MAAU,IAC9FhB,KAAI,SAAAmB,GACH,IAAMC,EAAajB,EAAgBM,SAASU,GACtCE,EAAE,8BAA0BF,GAGlC,OACE,sBAAuBD,UAAU,YAAjC,UACE,uBACAG,GAAIA,EACJnB,KAAK,WACLoB,MAAOH,EACPP,KAAMO,EACNI,QAASH,EACTI,SAVa,kBAAmBpB,EAAbgB,EAAgCjB,EAAgBK,QAAO,SAAAP,GAAE,OAAIA,IAAOkB,KAAgC,GAAD,mBAAKhB,GAAL,CAAsBgB,QAW5I,uBAAOM,QAASJ,EAAhB,SAAqBF,MARvB,cAAiBE,SAcvB,sBAAKH,UAAU,QAAf,UAAuB,6CAAoB,uBAAOA,UAAU,oBAAoBhB,KAAK,SAASoB,MAAM,aAAaI,QAAS,kBAAMpB,EAAmBC,SACnJ,qBAAKW,UAAU,UAAf,SAECX,EAAUP,KAAI,SAAAW,GACb,IAAMU,EAAE,8BAA0BV,EAAKC,MACjCQ,EAA4E,IAA/Df,EAAgBG,QAAO,SAAAP,GAAE,OAAIA,EAAGW,OAASD,EAAKC,QAAMC,OAGvE,OACE,sBAAuBK,UAAU,YAAjC,UACE,uBACIG,GAAIA,EACJnB,KAAK,WACLoB,MAAOX,EAAKC,KACZA,KAAMD,EAAKC,KACXW,QAASH,EACTI,SAVS,kBAAmBlB,EAAbc,EAAgCf,EAAgBG,QAAO,SAAAP,GAAE,OAAIA,EAAGW,OAASD,EAAKC,QAA4B,GAAD,mBAAKP,GAAL,CAAsBM,QAW9I,wBAAOc,QAASJ,EAAhB,UAAqBV,EAAKC,KAA1B,KAAkCD,EAAKM,OAAvC,SARN,cAAiBI,SAarB,sBAAKH,UAAU,QAAf,UAAuB,2CAAvB,IAA+CR,EAAYiB,QAAQ,GAAnE,YClDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.47a93969.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport gear from './gear.json'\nimport './App.css';\n\nfunction App() {\n  const [gearTypeFilters, setGearTypeFilters] = useState(gear.map(it => it.type))\n  const [gearItemFilters, setGearItemFilters] = useState([])\n  const gearItems = gear.filter(it => gearTypeFilters.includes(it.type))\n  const totalWeight = gearItems\n    .filter(it => gearTypeFilters.includes(it.type))\n    .filter(it => gearItemFilters.filter(item => item.name === it.name).length !== 0)\n    .reduce((previous, current) => previous + current.weight, 0)\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\"><h4>What type of gear you are taking?</h4></div>\n      <div className=\"content\">\n      {gear\n        .map(it => it.type)\n        .reduce((previous, current) => previous.includes(current) ? previous : [...previous, current], [])\n        .map(gearType => {\n          const isSelected = gearTypeFilters.includes(gearType)\n          const id = `gear-filter-stage-1-${gearType}`\n          const onChange = () => isSelected ? setGearTypeFilters(gearTypeFilters.filter(it => it !== gearType)) : setGearTypeFilters([...gearTypeFilters, gearType])\n\n          return (\n            <div key={`key-${id}`} className=\"gear-item\">\n              <input\n              id={id}\n              type=\"checkbox\"\n              value={gearType}\n              name={gearType}\n              checked={isSelected}\n              onChange={onChange} />\n              <label htmlFor={id}>{gearType}</label>\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"title\"><h4>Base weight</h4><input className=\"select-all-button\" type=\"button\" value=\"Select all\" onClick={() => setGearItemFilters(gearItems)} /></div>\n      <div className=\"content\">\n      \n      {gearItems.map(item => {\n        const id = `gear-filter-stage-2-${item.name}`\n        const isSelected = gearItemFilters.filter(it => it.name === item.name).length !== 0 ? true : false \n        const onChange = () => isSelected ? setGearItemFilters(gearItemFilters.filter(it => it.name !== item.name)) : setGearItemFilters([...gearItemFilters, item])\n\n        return (\n          <div key={`key-${id}`} className=\"gear-item\">\n            <input\n                id={id}\n                type=\"checkbox\"\n                value={item.name}\n                name={item.name}\n                checked={isSelected}\n                onChange={onChange} />\n                <label htmlFor={id}>{item.name} ({item.weight})</label>\n          </div>\n        )\n      })}\n      </div>\n      <div className=\"title\"><strong>Total</strong> {totalWeight.toFixed(2)}kg</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}