{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["consumablesWeight","typeToDescription","rucksack","rain","overnight","overnight_cold_weather","swim","cooking","hydration","dark","comfort","safety","devices","necessities","App","useState","gear","map","it","type","gearTypeFilters","setGearTypeFilters","gearItemFilters","setGearItemFilters","consumablesWater","setConsumablesWater","consumablesToiletPaper","setConsumablesToiletPaper","consumablesToiletWetWipes","setConsumablesToiletWetWipes","consumablesGasSmall","setConsumablesGasSmall","consumablesGasMedium","setConsumablesGasMedium","consumablesTurmatMeals","setConsumablesTurmatMeals","gearItems","filter","includes","totalConsumablesWeight","totalWeight","item","name","length","reduce","previous","current","weight","className","gearType","isSelected","id","value","checked","onChange","htmlFor","onClick","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78b1dc23.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport gear from './gear.json'\nimport './App.css';\n\nconst consumablesWeight = {\n  gasBottleSmall: 0.1,\n  gasBottleMedium: 0.230,\n  toiletPaper: 0.1,\n  wetWipes: 0.2,\n  turmatMeal: 0.120\n}\n\nconst typeToDescription = {\n  rucksack: 'I carry my stuff',\n  rain: 'Rainy',\n  overnight: 'Overnighter',\n  overnight_cold_weather: 'Overnighter in cold weather',\n  swim: 'Swimming!',\n  cooking: 'Preparing meals',\n  hydration: 'Bring/carry water',\n  dark: 'It will be dark',\n  comfort: 'Comfort for my camp',\n  safety: 'The destination is not familiar to me',\n  devices: 'I need my devices',\n  necessities: 'Phone, keys etc.',\n}\n\nfunction App() {\n  const [gearTypeFilters, setGearTypeFilters] = useState(gear.map(it => it.type))\n  const [gearItemFilters, setGearItemFilters] = useState([])\n  const [consumablesWater, setConsumablesWater] = useState(0)\n  const [consumablesToiletPaper, setConsumablesToiletPaper] = useState(0)\n  const [consumablesToiletWetWipes, setConsumablesToiletWetWipes] = useState(0)\n  const [consumablesGasSmall, setConsumablesGasSmall] = useState(0)\n  const [consumablesGasMedium, setConsumablesGasMedium] = useState(0)\n  const [consumablesTurmatMeals, setConsumablesTurmatMeals] = useState(0)\n  const gearItems = gear.filter(it => gearTypeFilters.includes(it.type))\n  const totalConsumablesWeight = consumablesWater + (consumablesGasSmall * consumablesWeight.gasBottleSmall) + (consumablesGasMedium * consumablesWeight.gasBottleMedium) + (consumablesToiletPaper * consumablesWeight.toiletPaper) + (consumablesToiletWetWipes * consumablesWeight.wetWipes) + (consumablesTurmatMeals * consumablesWeight.turmatMeal)\n  const totalWeight = gearItems\n    .filter(it => gearTypeFilters.includes(it.type))\n    .filter(it => gearItemFilters.filter(item => item.name === it.name).length !== 0)\n    .reduce((previous, current) => previous + current.weight, totalConsumablesWeight)\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\"><h4>What kind of trip?</h4></div>\n      <div className=\"content\">\n      {gear\n        .map(it => it.type)\n        .reduce((previous, current) => previous.includes(current) ? previous : [...previous, current], [])\n        .map(gearType => {\n          const isSelected = gearTypeFilters.includes(gearType)\n          const id = `gear-filter-stage-1-${gearType}`\n          const onChange = () => isSelected ? setGearTypeFilters(gearTypeFilters.filter(it => it !== gearType)) : setGearTypeFilters([...gearTypeFilters, gearType])\n\n          return (\n            <div key={`key-${id}`} className=\"gear-item\">\n              <input\n              id={id}\n              type=\"checkbox\"\n              value={gearType}\n              name={gearType}\n              checked={isSelected}\n              onChange={onChange} />\n              <label htmlFor={id}>{typeToDescription[gearType] ? typeToDescription[gearType] : gearType}</label>\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"title\"><h4>Base weight</h4><input className=\"select-all-button\" type=\"button\" value=\"Select all\" onClick={() => setGearItemFilters(gearItems)} /></div>\n      <div className=\"content\">\n      \n      {gearItems.map(item => {\n        const id = `gear-filter-stage-2-${item.name}`\n        const isSelected = gearItemFilters.filter(it => it.name === item.name).length !== 0 ? true : false \n        const onChange = () => isSelected ? setGearItemFilters(gearItemFilters.filter(it => it.name !== item.name)) : setGearItemFilters([...gearItemFilters, item])\n\n        return (\n          <div key={`key-${id}`} className=\"gear-item\">\n            <input\n                id={id}\n                type=\"checkbox\"\n                value={item.name}\n                name={item.name}\n                checked={isSelected}\n                onChange={onChange} />\n                <label htmlFor={id}>{item.name} ({item.weight})</label>\n          </div>\n        )\n      })}\n      </div>\n\n      <div className=\"title\"><h4>Consumables</h4></div>\n      <div className=\"content\">\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesWater(consumablesWater + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesWater(consumablesWater > 0 ? consumablesWater - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesWater} liters of water</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesGasSmall(consumablesGasSmall + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesGasSmall(consumablesGasSmall > 0 ? consumablesGasSmall - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesGasSmall} small gas bottles (100g)</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesGasMedium(consumablesGasMedium + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesGasMedium(consumablesGasMedium > 0 ? consumablesGasMedium - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesGasMedium} medium gas bottles (256g)</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesTurmatMeals(consumablesTurmatMeals + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesTurmatMeals(consumablesTurmatMeals> 0 ? consumablesTurmatMeals - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesTurmatMeals} packs of Turmat meals</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesToiletPaper(consumablesToiletPaper + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesToiletPaper(consumablesToiletPaper > 0 ? consumablesToiletPaper - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesToiletPaper} rolls of toilet paper</span>\n        </div>\n        <div>\n          <input type=\"button\" value=\"+\" onClick={() => setConsumablesToiletWetWipes(consumablesToiletWetWipes + 1)} />\n          <input type=\"button\" value=\"-\" onClick={() => setConsumablesToiletWetWipes(consumablesToiletWetWipes > 0 ? consumablesToiletWetWipes - 1 : 0)} />\n          <span className=\"consumables-label\">{consumablesToiletWetWipes} packs of wet wipes (50pc)</span>\n        </div>\n      </div>\n\n      <div className=\"title\"><strong>Total</strong> {totalWeight.toFixed(2)}kg</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}