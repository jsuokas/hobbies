{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["consumablesWeight","App","useState","gearItemFilters","setGearItemFilters","consumablesWater","setConsumablesWater","consumablesToiletPaper","setConsumablesToiletPaper","consumablesToiletWetWipes","setConsumablesToiletWetWipes","consumablesGasSmall","setConsumablesGasSmall","consumablesGasMedium","setConsumablesGasMedium","consumablesTurmatMeals","setConsumablesTurmatMeals","totalConsumablesWeight","totalWeight","gear","filter","it","item","name","length","reduce","previous","current","weight","className","onClick","class","map","index","id","isSelected","odd","undefined","type","value","checked","onChange","htmlFor","icon","toFixed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1ed4077.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport gear from './gear.json'\nimport './App.css';\nimport FeatherIcon from 'feather-icons-react';\n\nconst consumablesWeight = {\n  water: 1,\n  gasBottleSmall: 0.1,\n  gasBottleMedium: 0.230,\n  toiletPaper: 0.1,\n  wetWipes: 0.2,\n  turmatMeal: 0.120\n}\n\nconst typeToDescription = {\n  sleep_system: 'Sleep system',\n  rain_protection: 'Rain protection',\n  cook_system: 'Cook system',\n  water_system: 'Water system',\n  misc: 'Misc',\n  camera_gear: 'Camera gear',\n  safety: 'Safety',\n  clothing: 'Clothing',\n  devices: 'Devices'\n}\n\nfunction App() {\n  const [gearItemFilters, setGearItemFilters] = useState([])\n  const [consumablesWater, setConsumablesWater] = useState(0)\n  const [consumablesToiletPaper, setConsumablesToiletPaper] = useState(0)\n  const [consumablesToiletWetWipes, setConsumablesToiletWetWipes] = useState(0)\n  const [consumablesGasSmall, setConsumablesGasSmall] = useState(0)\n  const [consumablesGasMedium, setConsumablesGasMedium] = useState(0)\n  const [consumablesTurmatMeals, setConsumablesTurmatMeals] = useState(0)\n  const totalConsumablesWeight = (consumablesWater * consumablesWeight.water) + (consumablesGasSmall * consumablesWeight.gasBottleSmall) + (consumablesGasMedium * consumablesWeight.gasBottleMedium) + (consumablesToiletPaper * consumablesWeight.toiletPaper) + (consumablesToiletWetWipes * consumablesWeight.wetWipes) + (consumablesTurmatMeals * consumablesWeight.turmatMeal)\n  const totalWeight = gear\n    .filter(it => gearItemFilters.filter(item => item.name === it.name).length !== 0)\n    .reduce((previous, current) => previous + current.weight, totalConsumablesWeight)\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\"><h4>Base weight</h4><button className=\"button-secondary pure-button\" onClick={() => setGearItemFilters(gear)}>Select all</button></div>\n      <table class=\"pure-table\">\n          <tbody>\n            {gear.map((item, index) => {\n              const id = `gear-filter-stage-2-${item.name}`\n              const isSelected = gearItemFilters.filter(it => it.name === item.name).length !== 0 ? true : false \n              const onChange = () => isSelected ? setGearItemFilters(gearItemFilters.filter(it => it.name !== item.name)) : setGearItemFilters([...gearItemFilters, item])\n              const odd = index % 2 !== 0\n\n              return (\n                <tr className={odd ?  'pure-table-odd' : undefined} key={`key-${id}`}>\n                  <td>\n                  <input\n                    id={id}\n                    type=\"checkbox\"\n                    value={item.name}\n                    name={item.name}\n                    checked={isSelected}\n                    onChange={onChange} />\n                  </td>\n                  <td><label htmlFor={id}>{item.name}</label></td>\n                  <td>{item.weight}</td>\n              </tr>\n              )\n            })}\n          </tbody>\n      </table>\n\n      <div className=\"title\"><h4>Consumables</h4></div>\n      <table class=\"pure-table\">\n          <tbody>\n            <tr>\n              <td>\n                <button onClick={() => setConsumablesWater(consumablesWater + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesWater(consumablesWater > 0 ? consumablesWater - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesWater} liter of water</span>\n              </td>\n              <td>{consumablesWeight.water}</td>\n            </tr>\n            <tr className=\"pure-table-odd\">\n              <td>\n                <button onClick={() => setConsumablesGasSmall(consumablesGasSmall + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesGasSmall(consumablesGasSmall > 0 ? consumablesGasSmall - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesGasSmall} small gas bottles)</span>\n              </td>\n              <td>{consumablesWeight.gasBottleSmall}</td>\n            </tr>\n            <tr>\n              <td>\n                <button onClick={() => setConsumablesGasMedium(consumablesGasMedium + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesGasMedium(consumablesGasMedium > 0 ? consumablesGasMedium - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesGasMedium} medium gas bottles (256g)</span>\n              </td>\n              <td>{consumablesWeight.gasBottleMedium}</td>\n            </tr>\n            <tr className=\"pure-table-odd\">\n              <td>\n                <button onClick={() => setConsumablesTurmatMeals(consumablesTurmatMeals + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesTurmatMeals(consumablesTurmatMeals> 0 ? consumablesTurmatMeals - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesTurmatMeals} packs of Turmat meals</span>\n              </td>\n              <td>{consumablesWeight.turmatMeal}</td>\n            </tr>\n            <tr>\n              <td>\n                <button onClick={() => setConsumablesToiletPaper(consumablesToiletPaper + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesToiletPaper(consumablesToiletPaper > 0 ? consumablesToiletPaper - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesToiletPaper} rolls of toilet paper</span>\n              </td>\n              <td>{consumablesWeight.toiletPaper}</td>\n            </tr>\n            <tr className=\"pure-table-odd\">\n              <td>\n                <button onClick={() => setConsumablesToiletWetWipes(consumablesToiletWetWipes + 1)}><FeatherIcon icon=\"plus-circle\" /></button>\n                <button onClick={() => setConsumablesToiletWetWipes(consumablesToiletWetWipes > 0 ? consumablesToiletWetWipes - 1 : 0)}><FeatherIcon icon=\"minus-circle\" /></button>\n              </td>\n              <td>\n                <span className=\"consumables-label\">{consumablesToiletWetWipes} packs of wet wipes (50pc)</span>\n              </td>\n              <td>{consumablesWeight.wetWipes}</td>\n            </tr>\n          </tbody>\n      </table>\n\n      <div className=\"title\"><strong>Total</strong> {totalWeight.toFixed(2)}kg</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}